/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.Abstract.User;
import Business.Users.Admin;
import Business.Users.Customer;
import Business.Users.Supplier;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

import javax.swing.BorderFactory;
import javax.swing.JSplitPane;
/**
 *
 * @author AEDSpring2019
 */
public class AdminCreateScreen extends javax.swing.JPanel {

    /**
     * Creates new form AdminScreen
     */
    private JPanel panelRight;
    private Admin admin;
    JSplitPane splitPane;
    public AdminCreateScreen(JPanel panelRight, Admin admin, JSplitPane splitPane) {
        initComponents();
        this.panelRight = panelRight;
        this.admin = admin;
        this.splitPane=splitPane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreate = new javax.swing.JButton();
        txtUser = new javax.swing.JTextField();
        txtPword = new javax.swing.JTextField();
        txtRePword = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        lblPass = new javax.swing.JLabel();
        lblRepass = new javax.swing.JLabel();
        radioCustomer = new javax.swing.JRadioButton();
        radioSupplier = new javax.swing.JRadioButton();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        btnCreate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        txtUser.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        txtPword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtPword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPwordActionPerformed(evt);
            }
        });

        txtRePword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtRePword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRePwordActionPerformed(evt);
            }
        });

        lblUser.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblUser.setText("Username:");

        lblPass.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblPass.setText("Password:");

        lblRepass.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblRepass.setText("Re-enter password :");

        radioCustomer.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        radioCustomer.setText("Customer");
        radioCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCustomerActionPerformed(evt);
            }
        });

        radioSupplier.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        radioSupplier.setText("Supplier");
        radioSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSupplierActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBack.setText("< BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRepass)
                                    .addComponent(lblPass, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblUser, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(radioSupplier)
                                .addGap(42, 42, 42)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPword, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRePword, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioCustomer)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnBack)))
                .addContainerGap(401, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnBack)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUser))
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPass))
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRePword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRepass))
                        .addGap(129, 129, 129))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioSupplier)
                            .addComponent(radioCustomer))
                        .addGap(70, 70, 70)))
                .addComponent(btnCreate)
                .addContainerGap(123, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        String userName = txtUser.getText();
        String pWord= txtPword.getText();
        String rePword= txtRePword.getText();
        txtUser.setForeground(Color.BLACK);
        txtPword.setForeground(Color.BLACK);
        txtRePword.setForeground(Color.BLACK);
        lblUser.setForeground(Color.BLACK);
        lblPass.setForeground(Color.BLACK);
        lblRepass.setForeground(Color.BLACK);
        radioCustomer.setBackground(Color.LIGHT_GRAY);
        radioSupplier.setBackground(Color.LIGHT_GRAY);
        radioCustomer.setForeground(Color.BLACK);
        radioSupplier.setForeground(Color.BLACK);
        txtUser.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        txtPword.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        txtRePword.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        if(userName==null || userName.equals("") ){
            JOptionPane.showMessageDialog(null,"Enter username");
            txtUser.setForeground(Color.RED);
            lblUser.setForeground(Color.RED);
            txtUser.setBorder(BorderFactory.createLineBorder(Color.RED));
            return;
        }
        boolean checkPattern;
        checkPattern=checkUserNamePattern();
        if(!checkPattern)
        {
           // JOptionPane.showMessageDialog(null,"Enter username correctly!");
            return;
        }
        
        
        if(pWord==null || pWord.equals("") ){
            JOptionPane.showMessageDialog(null,"Enter Password");
            txtPword.setForeground(Color.RED);
            lblPass.setForeground(Color.RED);
            txtPword.setBorder(BorderFactory.createLineBorder(Color.RED));
            return;
        }
        
        checkPattern=checkPasswordPattern();
        if(!checkPattern)
        {
           // JOptionPane.showMessageDialog(null,"Enter password correctly!");
            return;
        }
        
        if(rePword==null || rePword.equals("") ){
            JOptionPane.showMessageDialog(null,"Enter Re-password");
            txtRePword.setForeground(Color.RED);
            lblRepass.setForeground(Color.RED);
            txtRePword.setBorder(BorderFactory.createLineBorder(Color.RED));
            return;
        }
        
        checkPattern=checkRePasswordPattern();
        if(!checkPattern)
        {
           // JOptionPane.showMessageDialog(null,"Enter re-password correctly!");
            return;
        }
        
        
        if(! pWord.equals(rePword))
        {
            JOptionPane.showMessageDialog(null,"Passwords do not match");
            txtPword.setForeground(Color.RED);
            txtRePword.setForeground(Color.RED);
            txtPword.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtRePword.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblPass.setForeground(Color.RED);
            lblRepass.setForeground(Color.RED);
            return;   
        }
        if(pWord.length()<6 || rePword.length()<6){
            JOptionPane.showMessageDialog(null,"Password and re-password length should be atleast 6");
            txtPword.setForeground(Color.RED);
            txtRePword.setForeground(Color.RED);
            txtPword.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtRePword.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblPass.setForeground(Color.RED);
            lblRepass.setForeground(Color.RED);
            return;
        }
        
       
        
        
        
        
        if(!(radioCustomer.isSelected() || radioSupplier.isSelected() )){
            JOptionPane.showMessageDialog(null,"Select Role!");
            radioCustomer.setBackground(Color.RED);
            radioSupplier.setBackground(Color.RED);
            radioCustomer.setForeground(Color.RED);
            radioSupplier.setForeground(Color.RED);
            return;
        }
        
        
        
        User newUser=null;
        if(radioCustomer.isSelected()){
        Customer u = new Customer(pWord,userName);
        admin.getCustDir().getCustomerList().add(u);
            System.out.println(u.toString()+" added in Customer list of "+admin.toString());
            newUser=u;
        }
        
        else if (radioSupplier.isSelected()){
        Supplier u = new Supplier(pWord,userName);
        admin.getSuppDir().getSupplierList().add(u);
        System.out.println(u.toString()+" added in Supplier list of "+admin.toString());
        newUser=u;
        
        }
        JOptionPane.showMessageDialog(null, "Created Successfully!");
        SuccessScreen ss = new SuccessScreen(newUser);
        splitPane.setRightComponent(ss);
        /*SuccessScreen ss = new SuccessScreen(newUser);
                CardLayout layout = (CardLayout)panelRight.getLayout();
                panelRight.add(ss);
                layout.next(panelRight);*/
    }//GEN-LAST:event_btnCreateActionPerformed

    private void radioCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCustomerActionPerformed
        // TODO add your handling code here:
        radioSupplier.setSelected(false);
    }//GEN-LAST:event_radioCustomerActionPerformed

    private boolean userNamePatternCorrect(String userName){
        Pattern p;
        p = Pattern.compile("^[a-zA-Z0-9]+_[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]+$");
        Matcher m = p.matcher(userName);
        boolean b= m.matches();
        return b;
    }
    //"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$*#&])[A-Za-z\\d$*#&]{6,}$"
    //"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$*#&])(?=\\S+$).{6, 20}$”
    //String PASSWORD_PATTERN = "((?=.*[a-z])(?=.*\\d)(?=.*[A-Z])(?=.*[$*#&]).{6,40})";
    private boolean PasswordPatternCorrect1(String passWord){
        Pattern p;
        String PASSWORD_PATTERN = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$*#&])(?=\\S+$).{6,}$";
        String regex = "^(?=.*[0-9])"
                   + "(?=.[a-z])(?=.[A-Z])"
                   + "(?=.*[@#$%^&+=])"
                   + "(?=\\S+$).{6,}$";
        //p = Pattern.compile("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$*#&])(?=\\S+$).{6,20}$");
        p=Pattern.compile(regex);
        Matcher m = p.matcher(passWord);
        return m.matches();
        
    }
    
    
    
  public static boolean PasswordPatternCorrect(String passWord){
/*String regex3 = "^(?=.*[0-9])"
                       + "(?=.*[a-z])(?=.*[A-Z])"
                       + "(?=.*[$&*#])"
                       + "(?=\\S+$).{6,20}$"; 
      */
    String regex3 = "^(?=.*[0-9])"
                       + "(?=.*[a-z])(?=.*[A-Z])"
                       +"(?=.*[#$&*])"
                       + "(?=\\S+$).{6,}$"; 
    Pattern p =Pattern.compile(regex3);
    Matcher m = p.matcher(passWord);
    return m.matches();
   
}
    
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        //System.out.println("this "+this);
        /*CardLayout layout = (CardLayout)panelRight.getLayout();
        //System.out.println("layout -"+layout);
        panelRight.remove(this);*/
        
        /*Component[] clist=panelRight.getComponents();
        AdminMainScreen ams= (AdminMainScreen) clist[0];
        System.out.println("clist[0] on back buttobn- "+clist[0]);*/
        AdminMainScreen ams = new AdminMainScreen(panelRight, admin, splitPane);
        ams.updateData();
        splitPane.setRightComponent(ams);
    //    JTable tblCustomer=(JTable) ams.getComponent(5);
      //  JTable tblSupplier=(JTable) ams.getComponent(6);
        /*for(Component c: clist)
        {
            if(c instanceof JTable){
                refresh((JTable)c);
            }
        }*/
//        refresh(tblCustomer,tblSupplier);
        
       // System.out.println("panelRight-"+ panelRight);
        //layout.previous(panelRight);
        //layout.show(panelRight,"AdminMainScreen");
        //layout.next(panelRight);
        //panelRight.toString();
        
        /*layout = (CardLayout)panelRight.getLayout();
        //System.out.println("layout -"+layout);
        panelRight.remove(this);
        layout.next(panelRight);
        
        layout = (CardLayout)panelRight.getLayout();
        panelRight.add(new AdminMainScreen(panelRight, (Admin)admin));
        layout.next(panelRight);*/
        
        
    }//GEN-LAST:event_btnBackActionPerformed

    
    private void refresh(JTable cTable, JTable sTable){
        //String tblName=c.getName();
        
        DefaultTableModel dtm = (DefaultTableModel)sTable.getModel();
        dtm.setRowCount(0);
        if(admin.getSuppDir().getSupplierList()!=null){
            
        for(User u : admin.getSuppDir().getSupplierList()){
            Supplier s = (Supplier)u;
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=s;
            row[1]=s.getDirectory().getProductList().size();
            dtm.addRow(row);
        }
        }
        
        dtm = (DefaultTableModel)cTable.getModel();
        dtm.setRowCount(0);
        if( admin.getCustDir().getCustomerList()!=null){
        for(User u : admin.getCustDir().getCustomerList()){
            Customer s = (Customer)u;
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=s;
            row[1]=s.getDateCreated();
            dtm.addRow(row);
        }
        }
        
        
        
        
    }
    
    
    
    private void refresnoh(JTable c){
        String tblName=c.getName();
        if(tblName.equals("tblSup")){
        DefaultTableModel dtm = (DefaultTableModel)c.getModel();
        dtm.setRowCount(0);
        if(admin.getSuppDir().getSupplierList()!=null){
            
        for(User u : admin.getSuppDir().getSupplierList()){
            Supplier s = (Supplier)u;
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=s;
            row[1]=s.getDirectory().getProductList().size();
            dtm.addRow(row);
        }
        }
        }
        else if(tblName.equals("tblCust")){
        DefaultTableModel dtm = (DefaultTableModel)c.getModel();
        dtm.setRowCount(0);
        if( admin.getCustDir().getCustomerList()!=null){
        for(User u : admin.getCustDir().getCustomerList()){
            Customer s = (Customer)u;
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=s;
            row[1]=s.getDateCreated();
            dtm.addRow(row);
        }
        }
        }
        
        
        
    }
    
    
    private void radioSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSupplierActionPerformed
        // TODO add your handling code here:
        radioCustomer.setSelected(false);
    }//GEN-LAST:event_radioSupplierActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        // TODO add your handling code here:
        //matchuserName
        
        
    }//GEN-LAST:event_txtUserActionPerformed

    private boolean checkUserNamePattern(){
        boolean userNameCheck=userNamePatternCorrect(txtUser.getText());
        if(!userNameCheck){
            txtUser.setBorder(BorderFactory.createLineBorder(Color.RED));//decode("#2C6791")));
            lblUser.setForeground(Color.RED);
            txtUser.setForeground(Color.RED);
            JOptionPane.showMessageDialog(null,"Please Correct User name, pattern- xx_xx@xx.xx");
            return false;
        }
        else{
            txtUser.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));//decode("#2C6791")));
            lblUser.setForeground(Color.BLACK);
            txtUser.setForeground(Color.BLACK);
        }
        return true;
    }
    
    
    private boolean checkPasswordPattern(){
        boolean passwordCheck=PasswordPatternCorrect(txtPword.getText());
       // boolean passwordCheck=PasswordPatternCorrect("Abc@2019");
        if(!passwordCheck){
            txtPword.setBorder(BorderFactory.createLineBorder(Color.RED));//decode("#2C6791")));
            lblPass.setForeground(Color.RED);
            txtPword.setForeground(Color.RED);
            JOptionPane.showMessageDialog(null,"Please Correct password, at least 6 digits and contain at least one upper case letter, one lower case letter, one digit and one special character $, *, # or &.");
            return false;
        }
        else{
            txtPword.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));//decode("#2C6791")));
            lblPass.setForeground(Color.BLACK);
            txtPword.setForeground(Color.BLACK);
        }
        return true;
    }
    
    
    private boolean checkRePasswordPattern(){
        boolean passwordCheck=PasswordPatternCorrect(txtRePword.getText());
        if(!passwordCheck){
            txtRePword.setBorder(BorderFactory.createLineBorder(Color.RED));//decode("#2C6791")));
            lblRepass.setForeground(Color.RED);
            txtRePword.setForeground(Color.RED);
            JOptionPane.showMessageDialog(null,"Please Correct Re-password, at least 6 digits and contain at least one upper case letter, one lower case letter, one digit and one special character $, *, # or &.");
            return false;
        }
        else{
            txtRePword.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));//decode("#2C6791")));
            lblRepass.setForeground(Color.BLACK);
            txtRePword.setForeground(Color.BLACK);
        }
        return true;
    }
    
    
    private void txtPwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPwordActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_txtPwordActionPerformed

    private void txtRePwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRePwordActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtRePwordActionPerformed

    
   /* @Override
    public String toString(){
        
        return "ok";
    }*/
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblRepass;
    private javax.swing.JLabel lblUser;
    private javax.swing.JRadioButton radioCustomer;
    private javax.swing.JRadioButton radioSupplier;
    private javax.swing.JTextField txtPword;
    private javax.swing.JTextField txtRePword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
